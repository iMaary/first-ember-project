import type { NodePath } from '@babel/traverse';
import type * as t from '@babel/types';
import { ImportUtil } from 'babel-import-util';
export interface Options {
    packageGuard?: boolean;
}
interface State {
    colocatedTemplate: string | undefined;
    associate: {
        component: t.Identifier;
        template: t.Identifier;
    } | undefined;
    adder: ImportUtil;
    opts: Options;
}
export default function main(babel: unknown): {
    visitor: {
        Program: {
            enter(path: NodePath<t.Program>, state: State): void;
            exit(path: NodePath<t.Program>, state: State): void;
        };
        ExportDefaultDeclaration(path: NodePath<t.ExportDefaultDeclaration>, state: State): void;
        ExportNamedDeclaration(path: NodePath<t.ExportNamedDeclaration>, state: State): void;
    };
};
export {};
